
=== You need cross-compiler

You need a cross-compiler setup. Point is to be able to use CMake, Perl, Bison, Ruby, Gperf and all that stuff which natively on OS4
not works as expected or not present at all.

Recommended is Linux because of proper fork() realization, on which CMake and it's build process (scanning dependencies) are based on.

Of course, you can use Cygwin (as I do), or whatever you want. Just be aware when you use Cygwin, it didn't have fork() as it has done
on Linux. It is emulated, and for each process is starting from scratch and has to load and init the Cygwin DLL, LibC, etc that a
fork-and-go system already has loaded. Because of that when Cmake starts to scan dependencies it may take a while. For example, it takes
about 15-20 minutes on scanning WebCore dependencies on fast enough PC with Cygwin. On Linux, everything will be much faster. I still
build everything on Cygwin on fast enough PC because of my own reasons, but it's still not _that fast_ and take about 1 hour to build
the whole Odyssey. On the same machine but on Linux cross-compiler it will take for about 20-30 minutes. Choose what you wish, there no
restrictions in terms of cross-compiling.

For building Odyssey you better to have Odyssey-only setup of cross-compiler as 3d party includes and libraries need it for building
Odyssey, will overwrite your newer and up2date includes and libs you may have in your SDK (such as PNG, Cairo, FreeType, OpenSSL, Curl,
and others). Or at least save your SDK directory.

There were many tutorials lately about how to set up a cross-compiler for AmigaOS4. If you want to use it over Cygwin, there is one I
wrote some time ago:

http://os4coding.net/blog/kas1e/how-build-amigaos4-cross-compiler-binutils-2232-gcc-830-cygwin

For Linux, it will be twice easier to set up, as you don't need the "install Cygwin" part.

You should have Adtool's GCC 8.3.0 (older 8.2.0 is ok too) and Hyperion's SDK_53.30 as a minimum.

You can compile it with GCC 4.4.3 with very minimal changes, but this source code is and will be based on the latest GCC.

=== Download Odyssey repo

Everything should be done from Cygwin's shell. All the commands I quote there need to be typed in Cygwin's shell.

Using any other GIT client you may find useful for you in not recommended, as you can end up with issues when your favorite GIT
client will convert line endings to Windows-style CRLF, and then the Odyssey build process will fail, because "lex" will fail.
So you on your own with your favorite Git clients, and that guide means that we use Cygwin's command line "git".

Also you should already have "/amiga" directory in root dir (to which you clone Adtools repo before). 

So, go to that directory and clone Odyssey's repo:

cd /amiga/
git clone https://github.com/kas1e/Odyssey/

You should end up with current odysseys 1.23 code being in /amiga/Odyssey/odyssey-r155188-1.23/
and SDK files being in /amiga/Odyssey/odyssey-r155188-1.23_SDK/


=== Install Odyssey's 3d party includes and libs

As been told, when you clone the repo, you also should have directory /amiga/Odyssey/odyssey-r155188-1.23_SDK/

All you need is to copy all the files from that odyssey-r155188-1.23_SDK over your AmigaOS4's SDK.
Your original AmigaOS4 installed SDK should be already in /usr/local/amiga/ppc-amigaos/SDK/, so you copy all those Odyssey's SDK files
in it. Pure copy of whole SDK driver on top of your AmigaOS4'S SDK driver is fine.

!!NOTE!!

Be aware ! as Odyssey uses some libs which probably will be older than the ones you have currently in SDK (PNG, Jpeg, Freetype, etc),
as well as some of them, have custom code added  (FontConfig, Cairo, Curl, etc) you better have a special "Odyssey only" cross-compiler
setup. Or at least save your original SDK directory before you overwrite it with ones from Odyssey's SDK.

Check SDK.txt for more info about a version of libs being used for Odyssey.

=== Compiling.

The build process of Odyssey means to build those parts:

libwtf.a          - commonly used functions all over the whole WebKit
libjsc.a          - JavaScript
libwebcore.a      - the core of WebKit. The bigger of all parts which take almost 80% of the whole build process.
                    CSS, DOM, HTML, filters, decoders, loaders, etc all here.
libwebkit-owb.a   - that our native Amiga code, with all the MUI-GUI code and related parts.
main.cpp          - that our main launcher file.

and then link it all together. 

Currently, I clean it all as much as possible to make it all automatic process, but still at end you need to do manual steps:
compile main.cpp and link it all together.

You can, of course, put that later to some script if you wish until things not fixed better.

Also if you follow instructions about Cygwin's cross-compiling installing from os4coding's article and only install developer packages
listed in, you will also in needs to install additionally 2 more: 

"gperf" and "ruby"

They both need for the building process.

Now to compiling. Firstly we generate via Cmake all the makefiles need it for the build process, by creating build directory and
issuing big-fat CMake command , being in the /amiga/Odyssey/odyssey-r155188-1.23/

mkdir build
cd build
cmake .. \
    -DCMAKE_CROSSCOMPILING=ON \
    -DCMAKE_TOOLCHAIN_FILE=./amigaos4.cmake \
    -DCMAKE_MODULE_PATH=../cmake \
    -DUSE_GRAPHICS="MORPHOS" \
    -DUSE_FONTS="FREETYPE" \
    -DUSE_TIMER="MORPHOS" \
    -DBUILD_SHARED_LIBS="NO" \
    -DUSE_THREADS="MORPHOS" \
    -DWITH_OWB_CONFIG_DIR="PROGDIR:owb.conf" \
    -DENABLE_MULTIPLE_THREADS=OFF \
    -DENABLE_ACCESSIBILITY:BOOL=ON \
    -DENABLE_BLOB:BOOL=ON \
    -DENABLE_DATALIST:BOOL=ON \
    -DENABLE_DOM_STORAGE:BOOL=ON \
    -DENABLE_EVENTSOURCE:BOOL=ON \
    -DENABLE_FILE_SYSTEM:BOOL=ON \
    -DENABLE_FILTERS:BOOL=ON \
    -DENABLE_ICONDATABASE:BOOL=ON \
    -DENABLE_INSPECTOR:BOOL=ON \
    -DENABLE_JIT_JSC:BOOL=OFF \
    -DENABLE_MATHML:BOOL=ON \
    -DENABLE_MEDIA_STATISTICS:BOOL=ON \
    -DENABLE_METER_TAG:BOOL=ON \
    -DENABLE_NOTIFICATIONS:BOOL=ON \
    -DENABLE_NPAPI:BOOL=ON \
    -DENABLE_OFFLINE_DYNAMIC_ENTRIES:BOOL=ON \
    -DENABLE_OFFLINE_WEB_APPLICATIONS:BOOL=ON \
    -DENABLE_PROGRESS_TAG:BOOL=ON \
    -DENABLE_REQUEST_ANIMATION_FRAME:BOOL=ON \
    -DENABLE_RUBY:BOOL=ON \
    -DENABLE_SANDBOX:BOOL=ON \
    -DENABLE_SQL_DATABASE:BOOL=ON \
    -DENABLE_SVG:BOOL=ON \
    -DENABLE_SVG_ANIMATION:BOOL=ON \
    -DENABLE_SVG_AS_IMAGE:BOOL=ON \
    -DENABLE_SVG_FONTS:BOOL=ON \
    -DENABLE_SVG_FOREIGN_OBJECT:BOOL=ON \
    -DENABLE_SVG_USE_ELEMENT:BOOL=ON \
    -DENABLE_WEB_SOCKETS:BOOL=ON \
    -DENABLE_WEB_TIMING:BOOL=ON \
    -DENABLE_XPATH:BOOL=ON \
    -DENABLE_XSLT:BOOL=ON \
    -DENABLE_TESTS:BOOL=OFF \
    -DENABLE_TESTS_CPPUNIT:BOOL=OFF \
    -DENABLE_YARR:BOOL=ON


Then while we in that "build" directory, we just do "make -f Makefile Odyssey -j4" (-j4 is to use 4 cores to speed the
compilation process).

If all will go fine, you will end up with the "Odyssey" binary placed in the build/bin directory. Take a release archive
from os4depot, and replace the binary with a new one to do tests.


=== Q/A

Q: Where is MorphOS and AmigaOS4 specific code?

A: It's placed all over the code (search for "amigaos4" in all .cpp and .h files, as well as for "MORPHOS". Also do check
   for all file names contains "morphos" in the name, some files just taken as it from MorphOS). A few changes in the "WTF"
   part, then a massive amount of work over GUI in the "webkit-owb" part, and a very little change in "webcore". Also "main.cpp".
   Almost all GUI based code placed in the Source/WebKit/OrigynWebBrowser/API/MorphOS/



Q: Where is MediaPlayer files?

A: Almost all of them are in BAL/Media/WebCore/MorphOS/
   BCMediaPlayerPrivateMorphOS.cpp_save file is saved original from Morphos and "BCMediaPlayerPrivateMorphOS.cpp" is aos4-adapted
   version.

   There is also acinerella.c in the same BAL/Media/WebCore/MorphOS/ directory, which is the FFmpeg wrapper for simplifying work with
   FFmpeg with some amiga-specific adaptation. It is open-sourced and can be found here: https://github.com/astoeckel/acinerella/

   The full-screen handler code of MediaPlayer through placed in the Source/WebKit/OriginWebBrowser/Api/MorphOS/owbbrowserclass.cpp,
   in the  OWBBrowser_VideoEnterFullPage method. Currently, only MorphOS's CGX5 based overlay are handled.

